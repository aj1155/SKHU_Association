buildscript {
	ext {
		springBootVersion = '1.4.2.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'

jar {
	baseName = 'association'
	version = '0.0.1-SNAPSHOT'
}


sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile("joda-time:joda-time")
	compile('org.springframework.boot:spring-boot-starter-jdbc')
	compile("org.jadira.usertype:usertype.jodatime:2.0.1")
	compile('org.springframework.boot:spring-boot-starter-security')
	compile 'io.jsonwebtoken:jjwt:0.6.0'
	compile("com.google.guava:guava:20.0")
	compile("org.projectlombok:lombok:1.16.2")
	compile("com.google.code.gson:gson:2.8.0")
	compile("org.apache.httpcomponents:httpclient:4.5.2")
	compile "org.igniterealtime.smack:smack-core:4.0.4"
	compile "org.igniterealtime.smack:smack-tcp:4.0.4"
	compile "com.googlecode.json-simple:json-simple:1.1"
	runtime('com.h2database:h2:1.4.186')
	runtime('mysql:mysql-connector-java:5.1.35')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	
	//jsp
	compile("javax.servlet:jstl")
	compile("org.apache.tomcat.embed:tomcat-embed-jasper")
	
	//security tag
	compile('org.springframework.security:spring-security-taglibs:3.2.0.RELEASE')
	
	//file upload
	compile ('commons-fileupload:commons-fileupload:1.3.1')

	//excel
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '3.9'

	//tiles
	 compile("org.apache.tiles:tiles-jsp:3.0.3")


	def querydslVersion = "4.1.4"
	/**
	 * querydsl dependency
	 */
	compile ("com.querydsl:querydsl-core:$querydslVersion")
	compile ("com.querydsl:querydsl-apt:$querydslVersion")
	compile ("com.querydsl:querydsl-jpa:$querydslVersion")
}	
	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

	sourceSets {
	generated {
		java { srcDirs = ['src/main/generated/java']}
	}
	main {
		java {
			srcDirs 'src/main/java'
			srcDirs 'src/main/generated/java'
		}
		resources { srcDir 'src/main/resources' }
	}
	test {
		java { srcDir 'src/test/java' }
		resources { srcDir 'src/test/resources' }
	}
}
def queryDslOutput = file("src/main/generated/java")

task generateQueryDSL(type: JavaCompile, group: 'build') {
	doFirst {
		if (!queryDslOutput.exists()) {
			logger.info("Creating `$queryDslOutput` directory")

			if (!queryDslOutput.mkdirs()) {
				throw new InvalidUserDataException("Unable to create `$queryDslOutput` directory")
			}
		}
	}

	source = sourceSets.main.java
	classpath = configurations.compile
	options.compilerArgs = [
			"-proc:only",
			"-processor",
			"com.querydsl.apt.jpa.JPAAnnotationProcessor"
	]
	destinationDir = queryDslOutput
}

clean {
	delete queryDslOutput
}

compileTestJava.dependsOn(generateQueryDSL)